## -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-
import Options
import os.path

class CouldNotFindFile:
    pass

def search_file(files):
    for f in files:
        if os.path.isfile (f):
            return f
    raise CouldNotFindFile ()


def set_options(opt):
    opt.tool_options('compiler_cc') 
    opt.add_option('--with-linux-stack',
                   help=('Path to the linux module'),
                   default=None,
                   dest='linux_stack', type="string")

def configure(conf):
    conf.check_tool('compiler_cc')
    conf.check(function_name='makecontext', 
               header_name='ucontext.h',
               mandatory=True)
    conf.env.append_value('LINKFLAGS', '-pthread')
    conf.env['HAVE_DL'] = conf.check (lib='dl')

    if Options.options.linux_stack is not None and os.path.isdir(Options.options.linux_stack):
        conf.check_message("linux stack location", '', True, 
                           ("%s (given)" % Options.options.linux_stack))
        conf.report_optional_feature("linux stack", "Linux stack", True,
                                     "enabled (found in %s)" % Options.options.linux_stack)
        conf.env['LINUX_STACK'] = os.path.abspath(Options.options.linux_stack)
        conf.env.append_value('NS3_MODULE_PATH', conf.env['LINUX_STACK'])
    else:
        conf.check_message("linux stack location", '', False)
        conf.report_optional_feature("linux stack", "Linux stack", False,
                                     "linux stack not found")

    vg_h = conf.check(header_name='valgrind/valgrind.h')
    vg_memcheck_h = conf.check(header_name='valgrind/memcheck.h')
    if vg_h and vg_memcheck_h:
        conf.env.append_value('CXXDEFINES', 'HAVE_VALGRIND_H')


def build(bld):
    dce = bld.create_ns3_module('dce', ['core', 'common', 'simulator', 'node'])
    dce.source = [
        'dce-manager.cc',
	'dce-application.cc',
        'dce.cc',
        'dce-signal.cc',
        'dce-manager-test.cc',
        'libc-dce.c',
        'utils.cc',
        'unix-fd.cc',
        'unix-file-fd.cc',
        'unix-socket-fd.cc',
        'unix-datagram-socket-fd.cc',
        'unix-stream-socket-fd.cc',
        'unix-timer-fd.cc',
        'dce-fd.cc',
        'dce-stdio.cc',
        'dce-pthread.cc',
        'dce-stdlib.cc',
        'dce-debug.cc',
        'dce-semaphore.cc',
        'dce-pthread-mutex.cc',
        'dce-cxa.cc',
        'dce-netdb.cc',
        'dce-string.cc',
        'dce-env.cc',
        'dce-pthread-cond.cc',
        'dce-timerfd.cc',
        'dce-stat.cc',
        'dce-global-variables.cc',
        'cmsg.cc',
        'waiter.cc',
        'kingsley-alloc.cc',
        'dce-alloc.cc',
        'fiber-manager.cc',
        'ucontext-fiber-manager.cc',
        'pthread-fiber-manager.cc',
        'task-manager.cc',
        'task-scheduler.cc',
        'rr-task-scheduler.cc',
        'loader-factory.cc',
        'elf-dependencies.cc',
        'elf-cache.cc',
        'cooja-loader-factory.cc',
        'copy-loader-factory.cc',
        'dlm-loader-factory.cc',
        'socket-fd-factory.cc',
        'ns3-socket-fd-factory.cc',
        'netlink/netlink-socket.cc',
        'netlink/netlink-socket-address.cc',
        'netlink/netlink-socket-factory.cc',
        'netlink/netlink-attribute.cc',
        'netlink/netlink-message.cc',
        'netlink/netlink-message-route.cc',
        'netlink/netlink-socket-test.cc',
        ]
    dce.uselib = 'DL'

    headers = bld.new_task_gen('ns3header')
    headers.module = 'dce'
    headers.source = [
        'dce-manager.h',
        'task-scheduler.h',
        'task-manager.h',
        'socket-fd-factory.h',
        'loader-factory.h',
	'dce-application.h',
        ]

    if dce.env['LINUX_STACK']:
        dce.source.extend([
                'linux-socket-fd-factory.cc',
                'linux-socket-fd.cc',
                ])
        dce.includes = dce.env['LINUX_STACK']
        headers.source.extend ([
                'linux-socket-fd-factory.h'])


    rvd = bld.new_task_gen('cc', 'program')
    rvd.name = 'readversiondef'
    rvd.target = 'readversiondef'
    rvd.source = ['readversiondef.c']

    bld.add_group('dce_version_files')

    libc = search_file ([
            '/lib64/libc.so.6',
            '/lib/libc.so.6',
            ])
    libpthread = search_file ([
            '/lib64/libpthread.so.0',
            '/lib/libpthread.so.0',
            ])

    bld.new_task_gen(source=['readversiondef', 'libc-ns3.version'],
                     target='libc.version',
                     rule='${SRC[0].abspath(env)} ' + libc + ' |' \
                         'cat ${SRC[1].abspath()} - > ${TGT}')

    bld.new_task_gen(source=['readversiondef', 'libpthread-ns3.version'],
                     target='libpthread.version',
                     rule='${SRC[0].abspath(env)} ' + libpthread + ' |' \
                         'cat ${SRC[1].abspath()} - > ${TGT}')

    bld.add_group('dce_use_version_files')

    # The very small libc used to replace the glibc
    # and forward to the dce_* code
    module = bld.new_task_gen('cc', 'shlib')
    module.name = 'c-ns3'
    module.target = module.name
    module.env.append_value('CCFLAGS', module.env['shlib_CCFLAGS'])
    module.env.append_value('CCFLAGS', '-g')
    module.env.append_value('CCDEFINES', 'LIBSETUP=libc_setup')
    module.env.append_value('LINKFLAGS', '-nostdlib')
    module.env.append_value('LINKFLAGS', 
                            '-Wl,--version-script=' + bld.path.find_or_declare('libc.version').bldpath(bld.env))
    module.env.append_value('LINKFLAGS', '-Wl,-soname=libc.so.6')
    module.source = ['libc.c', 'libc-global-variables.c']

    # The very small libpthread used to replace the glibc
    # and forward to the dce_* code
    module = bld.new_task_gen('cc', 'shlib')
    module.name = 'pthread-ns3'
    module.target = module.name
    module.env.append_value('CCFLAGS', module.env['shlib_CCFLAGS'])
    module.env.append_value('CCFLAGS', '-g')
    module.env.append_value('CCDEFINES', 'LIBSETUP=libpthread_setup')
    module.env.append_value('LINKFLAGS', '-nostdlib')
    module.env.append_value('LINKFLAGS', '-lc')
    module.env.append_value('LINKFLAGS', 
                            '-Wl,--version-script=' + bld.path.find_or_declare('libpthread.version').bldpath(bld.env))
    module.env.append_value('LINKFLAGS', '-Wl,-soname=libpthread.so.0')
    module.source = ['libc.c']

    # The following is needed to debug loader errors on ubuntu when you install libc6-dbg.
    #obj.env.append_value('LINKFLAGS', '-Wl,--dynamic-linker=/usr/lib/debug/ld-linux.so.2')

    bld.set_group(0)
